(function () {
    'use strict';

    // --- –ù–ê–°–¢–†–û–ô–ö–ò ---
    // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –í–ê–® –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π URL Torrentio (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–≤–æ–π)
    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: https://github.com/TnStark/Torrentio-Stremio-Addon (–∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
    // –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω.
    const TORRENTIO_URL = 'https://torrentio.strem.fun';

    // URL –¥–ª—è API The Pirate Bay (–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –∏–ª–∏ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å)
    // –ü—Ä–∏–º–µ—Ä: 'https://apibay.org' (–Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏–π –Ω–µ—Ç)
    // –ò—â–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: https://apibay.org/q.php?q={query}&cat=0
    const TPB_API_URL = 'https://apibay.org';

    // URL –¥–ª—è API YTS
    const YTS_API_URL = 'https://yts.mx/api/v2/list_movies.json';
    // --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è magnet-—Å—Å—ã–ª–∫–∏
    function buildMagnet(hash, name, trackers = []) {
        let magnet = `magnet:?xt=urn:btih:${hash}&dn=${encodeURIComponent(name)}`;
        trackers.forEach(tracker => {
            magnet += `&tr=${encodeURIComponent(tracker)}`;
        });
        return magnet;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.2 GB", "800 MB")
    function parseSize(sizeStr) {
        if (!sizeStr || typeof sizeStr !== 'string') return 0;
        const sizeMatch = sizeStr.match(/(\d+(\.\d+)?)\s*(GB|MB|KB)/i);
        if (sizeMatch) {
            const size = parseFloat(sizeMatch[1]);
            const unit = sizeMatch[3].toUpperCase();
            if (unit === 'GB') return Math.round(size * 1024 * 1024 * 1024);
            if (unit === 'MB') return Math.round(size * 1024 * 1024);
            if (unit === 'KB') return Math.round(size * 1024);
        }
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ —á–∏—Å–ª–æ –±–∞–π—Ç
        const bytes = parseInt(sizeStr);
        return isNaN(bytes) ? 0 : bytes;
    }

     // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–¥–æ–≤/–ø–∏—Ä–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ Torrentio
     function parseTorrentioPeers(title) {
        let seeds = 0;
        let peers = 0; // Torrentio —á–∞—Å—Ç–æ –Ω–µ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∏—Ö —á–µ—Ç–∫–æ, —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –∫–∞–∫ —Å–∏–¥—ã
        const peersMatch = title.match(/üë§\s*(\d+)/); // –ò—â–µ–º –∏–∫–æ–Ω–∫—É —é–∑–µ—Ä–∞ –∏ —á–∏—Å–ª–æ
        if (peersMatch) {
            seeds = parseInt(peersMatch[1]);
            peers = seeds; // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ
        }
        return { seeds, peers };
    }

     // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ Torrentio
     function parseTorrentioMeta(title) {
        let quality = '';
        let size = 0;
        const qualityMatch = title.match(/\b(4K|2160p|1080p|720p|480p)\b/i);
        if (qualityMatch) {
            quality = qualityMatch[1].toUpperCase();
            if (quality === '4K') quality = '2160p'; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º
        }
        const sizeMatch = title.match(/üíæ\s*([\d.]+)\s*(GB|MB)/i); // –ò—â–µ–º –∏–∫–æ–Ω–∫—É –¥–∏—Å–∫–µ—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä
        if (sizeMatch) {
            const sizeVal = parseFloat(sizeMatch[1]);
            const unit = sizeMatch[2].toUpperCase();
            if (unit === 'GB') size = Math.round(sizeVal * 1024 * 1024 * 1024);
            if (unit === 'MB') size = Math.round(sizeVal * 1024 * 1024);
        }

        // –£–±–∏—Ä–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        let cleanTitle = title.replace(/(\r\n|\n|\r)/gm, " ").replace(/\s+/g, ' '); // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        cleanTitle = cleanTitle.replace(/üë§\s*\d+/, '').replace(/üíæ\s*[\d.]+\s*(GB|MB)/i, '').trim();
        // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π [PROVIDER+] –µ—Å–ª–∏ –µ—Å—Ç—å
         cleanTitle = cleanTitle.replace(/^\[.*?\]\s*\+?\s*/, '').trim();

        return { quality, size, title: cleanTitle };
    }


    // --- –ò—Å—Ç–æ—á–Ω–∏–∫: Torrentio ---
    function searchTorrentio(params, results_callback) {
        if (!params.imdb_id) {
            Lampa.Utils.log('Torrentio: IMDB ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return results_callback([]);
        }

        const type = params.is_serial ? 'series' : 'movie';
        let url = `${TORRENTIO_URL}/stream/${type}/${params.imdb_id}`;
        if (params.is_serial) {
            url += `:${params.season}:${params.episode}`;
        }
        url += '.json';

        Lampa.Utils.log(`Torrentio: –ó–∞–ø—Ä–æ—Å –Ω–∞ ${url}`);

        Lampa.Utils.fetch(url, {
            method: 'GET',
            timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        }).then(response => response.json()).then(data => {
            Lampa.Utils.log('Torrentio: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
            let results = [];
            if (data && data.streams && data.streams.length > 0) {
                data.streams.forEach(stream => {
                    if (stream.infoHash && stream.name) {
                        const { seeds, peers } = parseTorrentioPeers(stream.title || stream.name);
                        const { quality, size, title: cleanTitle } = parseTorrentioMeta(stream.title || stream.name);
                        const magnet = buildMagnet(stream.infoHash, cleanTitle, stream.sources || []); // stream.sources –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä—ã

                        results.push({
                            title: cleanTitle,
                            size: size, // –†–∞–∑–º–µ—Ä –ø–∞—Ä—Å–∏—Ç—Å—è –∏–∑ stream.title
                            seeds: seeds,
                            peers: peers,
                            quality: quality || '?', // –ö–∞—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Å–∏—Ç—Å—è –∏–∑ stream.title
                            magnet: magnet,
                            hash: stream.infoHash,
                            url: `https://check.torrentio.strem.fun/stream/check/${stream.infoHash}`, // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –Ω–µ .torrent —Ñ–∞–π–ª
                            filename: cleanTitle, // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            source: 'Torrentio'
                        });
                    }
                });
                Lampa.Utils.log(`Torrentio: –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤`);
            } else {
                Lampa.Utils.log('Torrentio: –¢–æ—Ä—Ä–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç');
            }
            results_callback(results);
        }).catch(error => {
            Lampa.Noty.show('–û—à–∏–±–∫–∞ Torrentio: ' + error.message);
            Lampa.Utils.error('Torrentio: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ', error);
            results_callback([]); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        });
    }


    // --- –ò—Å—Ç–æ—á–Ω–∏–∫: The Pirate Bay (—á–µ—Ä–µ–∑ API/–ø—Ä–æ–∫—Å–∏) ---
    function searchTPB(params, results_callback) {
        if (!TPB_API_URL) {
            Lampa.Utils.log('TPB: URL API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return results_callback([]);
        }

        let query = params.title;
        if (params.year) query += ' ' + params.year;
        if (params.is_serial) {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞/—ç–ø–∏–∑–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä S01E02
            const season = params.season.toString().padStart(2, '0');
            const episode = params.episode.toString().padStart(2, '0');
            query += ` S${season}E${episode}`;
        }

        const url = `${TPB_API_URL}/q.php?q=${encodeURIComponent(query)}&cat=0`; // cat=0 - –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Lampa.Utils.log(`TPB: –ó–∞–ø—Ä–æ—Å –Ω–∞ ${url}`);

        Lampa.Utils.fetch(url, {
            method: 'GET',
            timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        }).then(response => response.json()).then(data => {
            Lampa.Utils.log('TPB: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
            let results = [];
            // –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ apibay.org: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            if (Array.isArray(data) && data.length > 0 && data[0].id !== "0") { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π ("0" id –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                 data.forEach(item => {
                    if (item.info_hash && item.name) {
                        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                        let quality = '?';
                        const qualityMatch = item.name.match(/\b(4K|2160p|1080p|720p|480p)\b/i);
                        if (qualityMatch) {
                             quality = qualityMatch[1].toUpperCase();
                             if (quality === '4K') quality = '2160p';
                         }

                        const magnet = buildMagnet(item.info_hash, item.name); // –¢—Ä–µ–∫–µ—Ä—ã TPB –æ–±—ã—á–Ω–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º

                        results.push({
                            title: item.name,
                            size: parseInt(item.size) || 0, // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
                            seeds: parseInt(item.seeders) || 0,
                            peers: parseInt(item.leechers) || 0,
                            quality: quality,
                            magnet: magnet,
                            hash: item.info_hash,
                            url: magnet, // Lampa —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç url –∫–∞–∫ magnet, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
                            filename: item.name,
                            source: 'TPB'
                        });
                    }
                });
                Lampa.Utils.log(`TPB: –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤`);
            } else {
                Lampa.Utils.log('TPB: –¢–æ—Ä—Ä–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
            }
            results_callback(results);
        }).catch(error => {
            Lampa.Noty.show('–û—à–∏–±–∫–∞ ThePirateBay: ' + error.message);
            Lampa.Utils.error('TPB: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ', error);
            results_callback([]);
        });
    }

    // --- –ò—Å—Ç–æ—á–Ω–∏–∫: YTS (YIFY) ---
    function searchYTS(params, results_callback) {
        // YTS –ª—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å IMDB ID –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
        if (params.is_serial) {
            Lampa.Utils.log('YTS: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤');
            return results_callback([]);
        }
        if (!params.imdb_id) {
             Lampa.Utils.log('YTS: IMDB ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
             return results_callback([]);
        }

        const url = `${YTS_API_URL}?query_term=${params.imdb_id}&limit=1`; // –ò—â–µ–º –ø–æ IMDB ID, limit=1 —Ç.–∫. ID —É–Ω–∏–∫–∞–ª–µ–Ω

        Lampa.Utils.log(`YTS: –ó–∞–ø—Ä–æ—Å –Ω–∞ ${url}`);

        Lampa.Utils.fetch(url, {
            method: 'GET',
            timeout: 10000
        }).then(response => response.json()).then(data => {
            Lampa.Utils.log('YTS: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
            let results = [];
            if (data && data.status === 'ok' && data.data && data.data.movie_count > 0 && data.data.movies && data.data.movies[0] && data.data.movies[0].torrents) {
                const movie = data.data.movies[0];
                movie.torrents.forEach(torrent => {
                    if (torrent.hash && torrent.quality) {
                        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã YTS (–º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è)
                         const ytsTrackers = [
                             "udp://tracker.opentrackr.org:1337/announce",
                             "udp://tracker.openbittorrent.com:6969/announce",
                             "udp://open.tracker.cl:1337/announce",
                             "udp://tracker.torrent.eu.org:451/announce",
                             "udp://tracker.dler.org:6969/announce",
                             "udp://tracker.moeking.me:6969/announce",
                             "udp://tracker.piratepublic.com:1337/announce",
                             "udp://ipv4.tracker.harry.lu:80/announce"
                         ];
                        const magnet = buildMagnet(torrent.hash, `${movie.title_long} [${torrent.quality}] [YTS.MX]`, ytsTrackers);
                        const quality = torrent.quality.includes('2160p') ? '2160p' :
                                        torrent.quality.includes('1080p') ? '1080p' :
                                        torrent.quality.includes('720p') ? '720p' : '?';

                        results.push({
                            title: `${movie.title} (${movie.year}) - ${torrent.quality} [${torrent.type.toUpperCase()}]`,
                            size: parseInt(torrent.size_bytes) || 0,
                            seeds: parseInt(torrent.seeds) || 0,
                            peers: parseInt(torrent.peers) || 0,
                            quality: quality,
                            magnet: magnet,
                            hash: torrent.hash,
                            url: torrent.url, // –°—Å—ã–ª–∫–∞ –Ω–∞ .torrent —Ñ–∞–π–ª
                            filename: `${movie.slug}-${torrent.quality}.torrent`,
                            source: 'YTS'
                        });
                    }
                });
                Lampa.Utils.log(`YTS: –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å–º–∞`);
            } else {
                Lampa.Utils.log('YTS: –§–∏–ª—å–º –∏–ª–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
            results_callback(results);
        }).catch(error => {
            Lampa.Noty.show('–û—à–∏–±–∫–∞ YTS: ' + error.message);
            Lampa.Utils.error('YTS: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ', error);
            results_callback([]);
        });
    }


    // --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ---
    Lampa.Plugin.create( {
        name: 'MultiSource Torrents',
        version: '1.1.0',
        author: 'AI Assistant',
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤: Torrentio, ThePirateBay (API), YTS',

        start: function () {
            Lampa.Utils.log('MultiSource Torrents: –ü–ª–∞–≥–∏–Ω –∑–∞–ø—É—â–µ–Ω');

            // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ Lampa
            // Lampa.Torrents.addSource –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ name –∏ search
            // search - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ Lampa –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
            // –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
            // 1. params: –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ/—Å–µ—Ä–∏–∞–ª–µ (title, year, imdb_id, tmdb_id, season, episode, is_serial...)
            // 2. results_callback: —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å –º–∞—Å—Å–∏–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤

            window.torrent_sources = window.torrent_sources || {}; // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

             // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
             if (!window.torrent_sources.torrentio) {
                 Lampa.Torrents.addSource({
                     name: 'Torrentio',
                     search: searchTorrentio
                 });
                 window.torrent_sources.torrentio = true;
                 Lampa.Utils.log('MultiSource Torrents: –ò—Å—Ç–æ—á–Ω–∏–∫ Torrentio –¥–æ–±–∞–≤–ª–µ–Ω');
            }

            if (!window.torrent_sources.tpb) {
                 Lampa.Torrents.addSource({
                     name: 'ThePirateBay',
                     search: searchTPB
                 });
                 window.torrent_sources.tpb = true;
                 Lampa.Utils.log('MultiSource Torrents: –ò—Å—Ç–æ—á–Ω–∏–∫ ThePirateBay –¥–æ–±–∞–≤–ª–µ–Ω');
             }

             if (!window.torrent_sources.yts) {
                 Lampa.Torrents.addSource({
                     name: 'YTS',
                     search: searchYTS
                 });
                 window.torrent_sources.yts = true;
                 Lampa.Utils.log('MultiSource Torrents: –ò—Å—Ç–æ—á–Ω–∏–∫ YTS –¥–æ–±–∞–≤–ª–µ–Ω');
             }

             // –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
             // Lampa.Noty.show('–ü–ª–∞–≥–∏–Ω MultiSource Torrents –∑–∞–≥—Ä—É–∂–µ–Ω'); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        },

        destroy: function() {
            // –¢—É—Ç –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —É–¥–∞–ª—è—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –Ω–æ –≤ Lampa —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ removeSource –Ω–µ—Ç.
            // –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ Lampa –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–≥–∏–Ω—ã.
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–≥–∏–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ–±–∞–≤–∏–ª–∏—Å—å —Å–Ω–æ–≤–∞
            window.torrent_sources = {};
            Lampa.Utils.log('MultiSource Torrents: –ü–ª–∞–≥–∏–Ω –≤—ã–≥—Ä—É–∂–µ–Ω');
        }
    });

})();